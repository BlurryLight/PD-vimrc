source ./pd.vimrc-base

set wildmenu


" <leader>cd 切换工作目录到[.root,.git]之类的所在的目录(见函数SearchRoot)
" nnoremap <silent><leader>cw exe 'cd' g:root_dir<CR>





" quickfix move
"nnoremap <leader>j  :cn<CR>
"nnoremap <leader>k  :cp<CR>

packadd cfilter
nnoremap <leader>qs :<C-U><C-R>=printf("Cfilter %s", "")<CR>
nnoremap <leader>qw :Cfilter warning<CR>
nnoremap <leader>qe :Cfilter error<CR>
nnoremap <leader>qn :col<CR>
nnoremap <leader>qp :cnew<CR>
autocmd BufReadPost quickfix nnoremap <buffer> v <C-w><Enter><C-w>L
autocmd BufReadPost quickfix nnoremap <buffer> s <C-w><Enter><C-w>K
augroup vimrc_colors
    au!
    au ColorScheme * hi QuickFixLine ctermfg=NONE cterm=bold guifg=NONE gui=bold
augroup END

function! ToggleLocList()
    if empty(filter(getwininfo(), 'v:val.loclist'))
        lopen
    else
        lclose
    endif
endfunction

" "from: https://github.com/lilydjwg/dotvim/blob/master/plugin/escalt.vim
" function Escalt_console()
"   " <M-P> are left out because it causes issues
"   " https://github.com/vim/vim/issues/7135
"   " reason: https://github.com/vim/vim/issues/2581#issuecomment-639746235
"   for i in range(48, 57) + range(65, 79) + range(81, 90) + range(97, 122)
"     exe "set <M-".nr2char(i).">=\<Esc>".nr2char(i)
"   endfor
"   set <M-,>=,
"   set <M-.>=.
" endfunction
"
" if !has('nvim')
"   call Escalt_console()
" endif

nnoremap <silent> e :call ToggleLocList()<cr>







"============================================= plugins ========================

" 安装plug.vim插件管理器，依赖curl
" 这一段必须在 plug#begin()之前
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" 在这一段需要的插件
" 插件
call plug#begin('~/.vim/plugged')

" " chdir to working buffer
" Plug 'mattn/vim-findroot'

" profiler
Plug 'tweekmonster/startuptime.vim'
" 中文vim帮助
Plug 'yianwillis/vimcdoc'

" Track the engine.
Plug 'SirVer/ultisnips'

" vim surround
Plug 'tpope/vim-surround'

" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'


" vim-osc52
Plug 'ojroques/vim-oscyank',{'branch': 'main'}
" git power
Plug 'tpope/vim-fugitive'
"
Plug 'lilydjwg/fcitx.vim'
" 缩进线
Plug 'Yggdroot/indentLine'
" base16主题
" 包含了很多主题
" 可以用:colorscheme base-16-<Tab>查看
" 也可以在http://chriskempson.com/projects/base16/上看
Plug 'chriskempson/base16-vim' 
Plug 'vim-airline/vim-airline-themes'
" Airline
Plug 'vim-airline/vim-airline'
" 文件树
Plug 'scrooloose/nerdtree',{'on':  'NERDTreeToggle'}
" CMake 字典补全
Plug 'huleiak47/vim-cmake-complete',{'for':['cmake']}
" CMake syntax
Plug 'pboettch/vim-cmake-syntax'
" 模糊查找
" 需要GNU global配合
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
" ALE 静态检查
Plug 'dense-analysis/ale'

" Skywind的异步执行
Plug 'skywind3000/asyncrun.vim'
" GLSL support
Plug 'tikhomirov/vim-glsl',{'for':'glsl'}

" Cmake support
" Plug 'vhdirk/vim-cmake'
"简单用法
" :CMake生成build目录，可以和asyncrun联动，可以传递参数
" :make编译，不是异步
" :CMakeclean 清理build文件夹

" cpp语法高亮加强
Plug 'octol/vim-cpp-enhanced-highlight'

"  Another CMake support

Plug 'BlurryLight/vim-cmake'


" 代码异步格式化
Plug 'sbdchd/neoformat'

" auto pair
Plug 'jiangmiao/auto-pairs'

" MOST HORRIBLE PLUGIN(NOT ACTURALLY A PLUGIN BUT A MONSTER)
Plug 'Valloric/YouCompleteMe',{'do':'./install.py --clangd-completer','on': ['YcmCompleter']}

" YCMgenerator
" Plug 'rdnetto/YCM-Generator',{'branch':'stable'}

"NERD commenter
" 快速注释
Plug 'scrooloose/nerdcommenter'

" Another one
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } ,'for': 'markdown'}


" tagbar
" leaderF的tag显示更全，但是这个的效果更好
Plug 'majutsushi/tagbar'

" c/c++ header / source 跳转
Plug  'BlurryLight/vim-fswitch'

" language highlight pack
" disabled. 里面有太多东西了
" Plug 'sheerun/vim-polyglot'



"rainbow parens
Plug 'luochen1990/rainbow'
let g:rainbow_conf = {
\   'separately': {
\       'cmake': 0,
\   }
\}
let g:rainbow_active = 1

" echodoc
Plug 'Shougo/echodoc.vim'

" My Private affairs
Plug 'wakatime/vim-wakatime'
call plug#end()



" ===============================插件配置=====================================
" 主题设置
" 使用256位颜色
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      set termguicolors
endif
set t_Co=256
let base16colorspace=256
" colorscheme base16-onedark
colorscheme base16-oceanicnext
" colorscheme base16-solarized-light
" let g:airline_theme = 'solarized'
" let g:airline_solarized_bg='light'



" tagbar
nnoremap <leader>t :TagbarToggle<CR>

" ultisnip
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" nerdtree 配置
" 下面两行：当打开一个文件夹时，自动打开nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" <leader>n打开nerdtree
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>nf :NERDTreeFocus<CR>
let NERDTreeQuitOnOpen=1

" 关闭vim当只剩下nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" leadF配置
" 自动更新索引
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "Source Code Pro"  }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }
let g:Lf_ShortcutF = "<leader>ff"
let g:Lf_GtagsAutoGenerate = 1
" <leader>fg搜索光标所在词语并允许跳转
nnoremap <leader>fg :<C-U><C-R>=printf("Leaderf! gtags -g %s --auto-jump", expand("<cword>"))<CR><CR>

" <leader>fr搜索光标所在词语的引用并允许跳转
nnoremap <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>

" <leader>fd搜索光标所在词语的定义并允许跳转
nnoremap <leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
" <leader>fb 显示本文件tag
nnoremap <leader>fb :<C-U><C-R>=printf("LeaderfBufTag")<CR><CR>

" <leader>fp 显示本文件函数列表
nnoremap <leader>fp :<C-U><C-R>=printf("LeaderfFunction!")<CR><CR>

" <leader>fs 显示所有symbols
nnoremap <leader>fs :<C-U><C-R>=printf("Leaderf gtags %s","")<CR><CR>
" <leader>fp 搜索某个pattern
nnoremap <leader>fp :<C-U><C-R>=printf("Leaderf rg %s", "")<CR>

" https://github.com/hanxi/dotfiles/blob/master/etc/vimrc.vim#L118~L131
"{{ 查找工程目录
function! SearchRoot()
  let l:scm_list = ['.root', '.svn', '.git']
  for l:item in l:scm_list
    let l:dirs = finddir(l:item, '.;', -1)
    if !empty(l:dirs)
      return fnamemodify(l:dirs[-1].'/../', ':p:h')
    endif
  endfor
  return getcwd()
endfunction
let g:root_dir = SearchRoot()
" autocmd BufEnter * exe ':cd '.g:root_dir
"}}

" neoformat设置
" format on save
" o/pyc后缀是为了gitignore,常见的gitignore都忽略
if filereadable(g:root_dir . "/.vimneoformat") ||  
            \ filereadable(g:root_dir . "/.clang-format") ||
            \ filereadable(g:root_dir . "/.vimneoformat.o") || 
            \ filereadable(g:root_dir . "/.vimneoformat.pyc")
    augroup fmt
    autocmd!
    autocmd BufWritePre * undojoin | Neoformat
    augroup END
endif

" GLSL support
let g:glsl_default_version = 'glsl330'
let g:glsl_file_extensions = '*.glsl,*.vsh,*.fsh,*.vert,*.tesc,*.tese,*.geom,*.frag,*.comp'


" Youcompleteme
" 让按键更正常
" 当有补全列表时，回车等于补全
" 当没有补全列表时，回车等于插入新行

augroup lazy_load_ycm
  autocmd!
  autocmd InsertEnter * call plug#load('YouCompleteMe')
                     \| autocmd! lazy_load_ycm
augroup END

inoremap <expr> <cr> ((pumvisible())?("\<C-y>"):("\<cr>"))
" 关闭每次都要load conf的提示
let g:ycm_confirm_extra_conf = 0
" 语义补全
let g:ycm_semantic_triggers =  {
            \ 'cmake': ['re!\w{2}'],
            \}
" 静态检查
let g:ycm_show_diagnostics_ui = 1
"let g:ycm_min_num_identifier_candidate_chars = 2
" 用ycm generator感觉会更好
"let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
" <leader>gd 跳转定义和声明
nnoremap <leader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
" <leader>gc goto doC 开一个prev窗口显示文档
nnoremap <leader>gc  :YcmCompleter GetDoc<CR>
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
nnoremap <C-]>  :YcmCompleter GoTo<CR>
inoremap <C-]>  :YcmCompleter GoTo<CR>
let g:ycm_goto_buffer_command = 'split-or-existing-window'
set completeopt+=menuone
set completeopt+=noselect
let g:ycm_warning_symbol='⚠'
let g:ycm_always_populate_location_list = 1


" nerd commenter注释
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1
" 关闭所有默认映射
let g:NERDCreateDefaultMappings = 0

" 快速注释，为了和多数IDE保持一致，可以映射到<C-/>上
" 不，我错了，<C-/>在vim里不能用
" from https://github.com/scrooloose/nerdcommenter/issues/267#issuecomment-248839961
" 可以用<leader>cc来切换和打开注释
autocmd! VimEnter * call s:fcy_nerdcommenter_map()
function! s:fcy_nerdcommenter_map()
    nmap <leader>cc <plug>NERDCommenterToggle
    vmap <leader>cc <plug>NERDCommenterToggle gv
endfunction

" markdown-preview.nvim
" https://github.com/iamcco/markdown-preview.nvim
" set to 1, nvim will open the preview window after entering the markdown buffer
" default: 0
let g:mkdp_auto_start = 0

"leader + m + k markdownpreview
nnoremap <leader>mk :MarkdownPreview<CR>

" set to 1, the nvim will auto close current preview window when change
" from markdown buffer to another buffer
" default: 1
let g:mkdp_auto_close = 1

" set to 1, the vim will refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
" default: 0
let g:mkdp_refresh_slow = 0

" set to 1, the MarkdownPreview command can be use for all files,
" by default it can be use in markdown file
" default: 0
let g:mkdp_command_for_global = 0

" set to 1, preview server available to others in your network
" by default, the server listens on localhost (127.0.0.1)
" default: 0
let g:mkdp_open_to_the_world = 1

" use custom IP to open preview page
" useful when you work in remote vim and preview on local browser
" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
" default empty
let g:mkdp_open_ip = ''

" specify browser to open preview page
" default: ''
let g:mkdp_browser = ''

" set to 1, echo preview page url in command line when open preview page
" default is 0
let g:mkdp_echo_preview_url = 1

" a custom vim function name to open preview page
" this function will receive url as param
" default is empty
let g:mkdp_browserfunc = ''

" options for markdown render
" mkit: markdown-it options for render
" katex: katex options for math
" uml: markdown-it-plantuml options
" maid: mermaid options
" disable_sync_scroll: if disable sync scroll, default 0
" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
"   middle: mean the cursor position alway show at the middle of the preview page
"   top: mean the vim top viewport alway show at the top of the preview page
"   relative: mean the cursor position alway show at the relative positon of the preview page
" hide_yaml_meta: if hide yaml metadata, default is 1
" sequence_diagrams: js-sequence-diagrams options
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {}
    \ }

" use a custom markdown style must be absolute path
let g:mkdp_markdown_css = ''

" use a custom highlight style must absolute path
let g:mkdp_highlight_css = ''

" use a custom port to start server or random for empty
let g:mkdp_port = ''

" preview page title
" ${name} will be replace with the file name
let g:mkdp_page_title = '「${name}」'

" cpp语法高亮加强
let g:cpp_posix_standard = 1 "打开POSIX高亮"
let g:cpp_experimental_template_highlight = 1 "template "
let g:cpp_member_variable_highlight = 1
let g:cpp_class_scope_highlight = 1
let g:cpp_class_decl_highlight = 1

" vhdirk/vim-CMake配置
" met g:cmake_project_generator="Ninja" "默认ninja
" let g:cmake_export_compile_commands = 1
" let g:cmake_ycm_symlinks = 1 "自动生成ycm

" vim-Cmake配置
let g:cmake_link_compile_commands = 1
let g:cmake_jump_on_error = 0 " We do not want to focus the console
let g:cmake_build_directory = 'build'

augroup vim-cmake-group
    au!
autocmd User CMakeBuildFailed CMakeClose
autocmd User CMakeBuildFailed copen
autocmd User CMakeBuildFailed Cfilter error
augroup END

augroup vim-cmake-group
autocmd! User CMakeBuildSucceeded CMakeClose
augroup END

nnoremap <leader>zg :<C-U><C-R>=printf("CMakeGenerate %s", "Debug")<CR>
nnoremap <leader>zb :<C-U><C-R>=printf("CMakeBuild --parallel %s", "")<CR>
nnoremap <leader>zs :<C-U><C-R>=printf("CMakeSwitch %s", "")<CR>
nnoremap <leader>zc :CMakeClose<CR>


" C/C++源代码跳转
" gf去头文件
" <C+w>gf 在新窗口打开
" C+] 利用tag跳转, C+i C+o跳转buffer
" 还有接下来的定义

nnoremap <leader>sw :FSSplitAbove<CR>
nnoremap <leader>ss :FSSplitBelow<CR>
nnoremap <leader>sa :FSSplitLeft<CR>
nnoremap <leader>sd :FSSplitRight<CR>

" 参数提示
" YCM has done it
"To use echodoc, you must increase 'cmdheight' value.
set cmdheight=2
let g:echodoc_enable_at_startup = 1
" set noshowmode

" \'c':[],
" \'cpp':[],
" ALE设置
let g:ale_linters = {
            \'python':['pylint'],
            \'cpp':['clangd'],
            \'c':['clangd'],
            \}
let g:ale_fixers ={
            \'cpp':['clangtidy','clang-format'],
            \'c':['clangtidy','clang-format'],
            \}
let g:ale_completion_enabled = 0
" disable warning,convention and refactoring
let g:ale_python_pylint_options= "--extension-pkg-whitelist=cv2,numpy,torch	--disable=C,R --init-hook='import sys; sys.path.append(\".\")'"
" Write this in your vimrc file
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
" You can disable this option too
" if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0

" auto open quickfix at height of 8 lines
let g:asyncrun_open = 8
let g:asyncrun_bell = 1
nnoremap <silent> q :call asyncrun#quickfix_toggle(8)<cr>


" indentLine breaks json files
let g:vim_json_conceal = 0

"  vim-osc52
"  <leader>terminal-copy 使用魔法osc-52复制到剪切板
vnoremap <leader>ty :OSCYank<CR>
" " 自动复制+ reg
" augroup OSCYank
"   autocmd!
"   autocmd TextYankPost *
"     \ if v:event.operator is 'y' && v:event.regname is '+' | call YankOSC52(getreg('+')) | endif
" augroup END

"Quickfix
" close vim when quickfix is the last window
aug QFClose
  au!
    au WinEnter * if winnr('$') == 1 && &buftype == "quickfix"|q|endif
aug END

"===============================语言配置=====================================

" only support c file
" I rarely use vim to write C++ code
" I'd to admit vscode and Qtcreator do much better than vim when writting
" C++ code, especially when templates joining the party.

" command Make will call make and then cwindow which
" opens a 3 line error window if any errors are found.
" " If no errors, it closes any open cwindow.
autocmd filetype c set makeprg=gcc\ -O2\ -lpthread\ -std=gnu99\ -g\ %\ -o\ %<  
autocmd filetype c nnoremap <leader>r :silent make\|redraw!\|cw<CR>
autocmd filetype cpp nnoremap <leader>gr :AsyncRun g++ "%" -o "%<" -lpthread -Wall -Wpedantic<CR>
autocmd filetype cpp nnoremap <leader>cr :AsyncRun clang++ "%" -o "%<" -lpthread -Wall -Wpedantic<CR>
autocmd FileType c,cpp setlocal equalprg=clang-format


" 高亮所在行的行号
" 必须放在主题的后面，覆盖主题设置
" 强迫症杀手
highlight CursorLine cterm=NONE ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE
set cursorline

" for error highlight，防止错误整行标红导致看不清
" 从k-vim里面拿过来的
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline
augroup disable_paste
au!
	au InsertLeave * set nopaste
augroup END

