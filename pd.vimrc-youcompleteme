" License: WTFPL


"============================================= basic settings =========================================
"禁止swap file
set noswapfile
" I don't care the f**king vi
set nocompatible
" 强化正则表达式,没有magic，正则表达式近乎无法使用
set magic

" 显示
set number      "行号
set ruler      "行号和列号

" 加大移动距离
set scrolloff=10

" 增强标题显示
set title

" 离开窗口时自动保存，回到窗口时自动更新
au FocusGained,BufEnter * :silent! !
au FocusLost,WinLeave * :silent! w

" 简写信息，并关闭乌干达可怜儿童
set shortmess+=atI

"打开自动探测文件类型和缩进
filetype on
filetype plugin on
filetype indent on

"设置leader
"let mapleader = ','
"let g:mapleader = ','

"设置文件编码
" 内部编码
set encoding=utf-8
" 读取文件时候顺序猜测编码
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
" 用于屏幕显示的编码
set termencoding=utf-8


" 自动缩进
set autoindent

" 高亮第80列
set colorcolumn=80

" 自动折行(这个是硬折行)
"set linebreak

" 高亮选中
set hlsearch

" 自动换行
set wrap

" 设置默认进行大小写不敏感查找
set ignorecase
" " 如果有一个大写字母，则切换到大小写敏感查找
set smartcase
"

" 让退格键能正常退格
set backspace=indent,eol,start
" Vim默认左右方向键不会切换到下一行，调一下，让<>,h,l,[,]都可以换行
set whichwrap+=<,>,h,l,[,]

" 自动去除部分文件的行尾空格
autocmd FileType c,cpp,java,php autocmd BufWritePre <buffer> %s/\s\+$//e

set timeout
set ttimeout " 打开timeout和ttimeout
set timeoutlen=3000 " 自定义的map 3秒视为超时
set ttimeoutlen=100 " 内置的50ms
"============================================= KEYS MAPPING ==================
" 部分快捷键
" leader+p复制粘贴模式
set pastetoggle=<leader>p
vnoremap <leader>Y :w! /tmp/vitmp<CR>                                                                   
nnoremap <leader>P :r! cat /tmp/vitmp<CR>
" <F2>关闭开启数字行号
nnoremap <leader>nu :set nu! nu?<CR>
" :W 表示sudo权限强制保存
command W :execute ':silent w !sudo tee % > /dev/null' | :edit!
" Upper U to redo
nnoremap U <C-r>

" <leader>/关闭搜索高亮
noremap <silent><leader>/ :nohls<CR>

"select all
map <Leader>a ggVG"
" Shift+H goto head of the line, Shift+L goto end of the line
nnoremap H ^
nnoremap L $

" command mode, ctrl-a to head， ctrl-e to tail
cnoremap <C-a> <Home>
cnoremap <C-e> <End>



" tab替代
set expandtab "tab to spaces
set smarttab  "删除会自动删除等同于tab数量的空格
set shiftround ">>和<<会处理没对齐的情况
" indent
set autoindent smartindent shiftround
set shiftwidth=4
set tabstop=4
set softtabstop=4                " insert mode tab and backspace use 4 spaces

" 简化在不同窗口中移动的操作
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" 移动后再次重新选中
vnoremap < <gv
vnoremap > >gv

" tabpage
" <leader>tb 创建tab
" <leader>tc 关闭tab
nnoremap <leader>tb :tabnew<CR>
inoremap <leader>tb <ESC>:tabnew<CR>
nnoremap <leader>tc :tabclose<CR>



"============================================= plugins ========================

" 安装plug.vim插件管理器，依赖curl
" 这一段必须在 plug#begin()之前
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" 在这一段需要的插件
" 插件
call plug#begin('~/.vim/plugged')

" git power
Plug 'tpope/vim-fugitive'
"
Plug 'lilydjwg/fcitx.vim'
" 缩进线
Plug 'Yggdroot/indentLine'
" base16主题
Plug 'chriskempson/base16-vim'
" Airline
Plug 'vim-airline/vim-airline'
" 文件树
Plug 'scrooloose/nerdtree'
" CMake 字典补全
Plug 'huleiak47/vim-cmake-complete',{'for':['cmake']}
" 模糊查找
" 需要GNU global配合
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
" ALE 静态检查
Plug 'dense-analysis/ale'

" C++ 增强高亮
Plug 'octol/vim-cpp-enhanced-highlight'

" Skywind的异步执行
Plug 'skywind3000/asyncrun.vim'

" Cmake support
Plug 'vhdirk/vim-cmake'
"简单用法
" :CMake编译，可以和asyncrun联动，可以传递参数
" :CMakeclean 清理build文件夹



" 代码异步格式化
Plug 'sbdchd/neoformat'

" auto pair
Plug 'jiangmiao/auto-pairs'

" GLSL support
Plug 'tikhomirov/vim-glsl'

" MOST HORRIBLE PLUGIN(NOT ACTURALLY A PLUGIN BUT A MONSTER)
Plug 'Valloric/YouCompleteMe',{'do':'./install.py --clangd-completer'}

" YCMgenerator
Plug 'rdnetto/YCM-Generator',{'branch':'stable'}

"NERD commenter
" 快速注释
Plug 'scrooloose/nerdcommenter'

"
" Another one
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } ,'for': 'markdown'}


" tagbar
" leaderF的tag显示更全，但是这个的效果更好
Plug 'majutsushi/tagbar'


" cpp语法高亮加强
Plug 'octol/vim-cpp-enhanced-highlight'

" c/c++ header / source 跳转
Plug  'derekwyatt/vim-fswitch'


"rainbow parens
Plug 'luochen1990/rainbow'
let g:rainbow_conf = {
\   'separately': {
\       'cmake': 0,
\   }
\}
let g:rainbow_active = 1

" echodoc
Plug 'Shougo/echodoc.vim'

" My Private affairs
Plug 'wakatime/vim-wakatime'
call plug#end()



" ===============================插件配置=====================================
" 主题设置
" 使用256位颜色
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      set termguicolors
endif
set t_Co=256
let base16colorspace=256
colorscheme base16-oceanicnext
"colorscheme qdark

" tagbar
nnoremap <F4> :TagbarToggle<CR>
nnoremap <leader>t :TagbarToggle<CR>


" nerdtree 配置
" 下面两行：当打开一个文件夹时，自动打开nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" <leader><n>打开nerdtree
nnoremap <leader>n :NERDTreeToggle<CR>

" 关闭vim当只剩下nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" leadF配置
" 自动更新索引
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "Source Code Pro"  }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }
let g:Lf_ShortcutF = "<leader>ff"
let g:Lf_GtagsAutoGenerate = 1
" <leader>fg搜索光标所在词语并允许跳转
noremap <leader>fg :<C-U><C-R>=printf("Leaderf! gtags -g %s --auto-jump", expand("<cword>"))<CR><CR>

" <leader>fr搜索光标所在词语的引用并允许跳转
noremap <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>

" <leader>fd搜索光标所在词语的定义并允许跳转
noremap <leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
" <leader>fb 显示本文件tag
noremap <leader>fb :<C-U><C-R>=printf("LeaderfBufTag")<CR><CR>

" <leader>fp 显示本文件函数列表
noremap <leader>fp :<C-U><C-R>=printf("LeaderfFunction!")<CR><CR>

" <leader>fs 显示所有symbols
noremap <leader>fs :<C-U><C-R>=printf("Leaderf gtags %s","")<CR><CR>
" <leader>fp 搜索某个pattern
noremap <leader>fp :<C-U><C-R>=printf("Leaderf rg %s", "")<CR>


" neoformat设置
" format on save
"augroup fmt
"    autocmd!
"    autocmd BufWritePre * undojoin | Neoformat
"augroup END

" GLSL support
let g:glsl_default_version = 'glsl330'
let g:glsl_file_extensions = '*.glsl,*.vsh,*.fsh,*.vert,*.tesc,*.tese,*.geom,*.frag,*.comp'


" Youcompleteme
" 让按键更正常
" 当有补全列表时，回车等于补全
" 当没有补全列表时，回车等于插入新行
inoremap <expr> <cr> ((pumvisible())?("\<C-y>"):("\<cr>"))
" 关闭每次都要load conf的提示
let g:ycm_confirm_extra_conf = 0
"
" 语义补全
" let g:ycm_semantic_triggers =  {
"             \ 'c,cpp': ['re!\w{4}'],
"             \}
" 静态检查
let g:ycm_show_diagnostics_ui = 1
"let g:ycm_min_num_identifier_candidate_chars = 2
" 用ycm generator感觉会更好
"let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_key_list_select_completion = ['<c-j>', '<c-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>', '<c-k>']
" <leader>gd 跳转定义和声明
nnoremap <leader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_goto_buffer_command = 'vertical-split'
set completeopt+=menuone
set completeopt+=noselect


" nerd commenter注释
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

" 快速注释，为了和多数IDE保持一致，可以映射到<C-/>上
" 不，我错了，<C-/>在vim里不能用
" from https://github.com/scrooloose/nerdcommenter/issues/267#issuecomment-248839961
" 可以用<leader>cc来切换和打开注释
autocmd! VimEnter * call s:fcy_nerdcommenter_map()
function! s:fcy_nerdcommenter_map()
    nmap <leader>cc <plug>NERDCommenterToggle
    vmap <leader>cc <plug>NERDCommenterToggle gv
endfunction

" markdown-preview.nvim
" https://github.com/iamcco/markdown-preview.nvim
" set to 1, nvim will open the preview window after entering the markdown buffer
" default: 0
let g:mkdp_auto_start = 0

"leader + m + k markdownpreview
nnoremap <leader>mk <Plug>MarkdownPreview

" set to 1, the nvim will auto close current preview window when change
" from markdown buffer to another buffer
" default: 1
let g:mkdp_auto_close = 1

" set to 1, the vim will refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
" default: 0
let g:mkdp_refresh_slow = 0

" set to 1, the MarkdownPreview command can be use for all files,
" by default it can be use in markdown file
" default: 0
let g:mkdp_command_for_global = 0

" set to 1, preview server available to others in your network
" by default, the server listens on localhost (127.0.0.1)
" default: 0
let g:mkdp_open_to_the_world = 0

" use custom IP to open preview page
" useful when you work in remote vim and preview on local browser
" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
" default empty
let g:mkdp_open_ip = ''

" specify browser to open preview page
" default: ''
let g:mkdp_browser = ''

" set to 1, echo preview page url in command line when open preview page
" default is 0
let g:mkdp_echo_preview_url = 0

" a custom vim function name to open preview page
" this function will receive url as param
" default is empty
let g:mkdp_browserfunc = ''

" options for markdown render
" mkit: markdown-it options for render
" katex: katex options for math
" uml: markdown-it-plantuml options
" maid: mermaid options
" disable_sync_scroll: if disable sync scroll, default 0
" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
"   middle: mean the cursor position alway show at the middle of the preview page
"   top: mean the vim top viewport alway show at the top of the preview page
"   relative: mean the cursor position alway show at the relative positon of the preview page
" hide_yaml_meta: if hide yaml metadata, default is 1
" sequence_diagrams: js-sequence-diagrams options
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {}
    \ }

" use a custom markdown style must be absolute path
let g:mkdp_markdown_css = ''

" use a custom highlight style must absolute path
let g:mkdp_highlight_css = ''

" use a custom port to start server or random for empty
let g:mkdp_port = ''

" preview page title
" ${name} will be replace with the file name
let g:mkdp_page_title = '「${name}」'

" cpp语法高亮加强
let g:cpp_posix_standard = 1 "打开POSIX高亮"
let g:cpp_experimental_template_highlight = 1 "template "
let g:cpp_member_variable_highlight = 1
let g:cpp_class_scope_highlight = 1
let g:cpp_class_decl_highlight = 1

" CMake配置
let g:cmake_project_generator="Ninja" "默认ninja 
let g:cmake_export_compile_commands = 1
let g:cmake_ycm_symlinks = 1 "自动生成ycm

" C/C++源代码跳转
" gf去头文件
" <C+w>gf 在新窗口打开
" C+] 利用tag跳转, C+i C+o跳转buffer
" 还有接下来的定义

nnoremap <leader>sw :FSSplitAbove<CR>
nnoremap <leader>ss :FSSplitBelow<CR>
nnoremap <leader>sa :FSSplitLeft<CR>
nnoremap <leader>sd :FSSplitRight<CR>

" 参数提示
"To use echodoc, you must increase 'cmdheight' value.
set cmdheight=2
let g:echodoc_enable_at_startup = 1

" ALE设置
let g:ale_linters = {
            \'python':['pylint'],
            \'c':[],
            \'cpp':[],
            \}
let g:ale_completion_enabled = 0
" disable warning,convention and refactoring
let g:ale_python_pylint_options= "--extension-pkg-whitelist=cv2,numpy,torch	--disable=C,R --init-hook='import sys; sys.path.append(\".\")'"
" auto open quickfix at height of 8 lines
let g:asyncrun_open = 8
let g:asyncrun_bell = 1
nnoremap q :call asyncrun#quickfix_toggle(8)<cr>

" indentLine breaks json files
let g:vim_json_conceal = 0
"===============================语言配置=====================================


au bufnewfile *.sh 0r ~/.vim/template/shell.tpl
au bufnewfile *.py 0r ~/.vim/template/python.tpl

" only support c file
" I rarely use vim to write C++ code
" I'd to admit vscode and Qtcreator do much better than vim when writting
" C++ code, especially when templates joining the party.

" command Make will call make and then cwindow which
" opens a 3 line error window if any errors are found.
" " If no errors, it closes any open cwindow.
autocmd filetype c set makeprg=gcc\ -O2\ -lpthread\ -std=gnu99\ -g\ %\ -o\ %<  
autocmd filetype c nnoremap <leader>r :silent make\|redraw!\|cw<CR>
autocmd filetype cpp nnoremap <leader>gr :AsyncRun g++ "%" -o "%<" -lpthread -Wall -Wpedantic<CR>
autocmd filetype cpp nnoremap <leader>cr :AsyncRun clang++ "%" -o "%<" -lpthread -Wall -Wpedantic<CR>
" quickfix move
nnoremap <leader>j  :cn<CR>
nnoremap <leader>k  :cp<CR>

" 高亮所在行的行号
" 必须放在主题的后面，覆盖主题设置
" 强迫症杀手
highlight CursorLine cterm=NONE ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE
set cursorline

" for error highlight，防止错误整行标红导致看不清
" 从k-vim里面拿过来的
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline
augroup disable_paste
au!
	au InsertLeave * set nopaste
augroup END

