" allow vim to use bash alias in th file
let $BASH_ENV = "$HOME/.pd-common/common.rc"
source $HOME/pd.vimrc-base
" https://github.com/hanxi/dotfiles/blob/master/etc/vimrc.vim#L118~L131
"{{ 查找工程目录
function! SearchRoot()
  let l:scm_list = ['.root','.project','.svn', '.git','.hg']
  for l:item in l:scm_list
    let l:dirs = finddir(l:item, '.;', -1)
    if !empty(l:dirs)
      return fnamemodify(l:dirs[-1].'/../', ':p:h')
    endif
  endfor
  return getcwd()
endfunction
let g:root_dir = SearchRoot()


set wildmenu

" <leader>cd 切换工作目录到[.root,.git]之类的所在的目录(见函数SearchRoot)
" //leader dir root:
nnoremap <silent><leader>dr :<C-U>cd `=g:root_dir`<CR>


" quickfix move
"nnoremap <leader>j  :cn<CR>
"nnoremap <leader>k  :cp<CR>

packadd cfilter
nnoremap <leader>qs :<C-U><C-R>=printf("Cfilter %s", "")<CR>
nnoremap <leader>qw :Cfilter warning<CR>
nnoremap <leader>qe :Cfilter error<CR>
nnoremap <leader>qn :col<CR>
nnoremap <leader>qp :cnew<CR>
autocmd BufReadPost quickfix nnoremap <buffer> v <C-w><Enter><C-w>L
autocmd BufReadPost quickfix nnoremap <buffer> s <C-w><Enter><C-w>K
augroup vimrc_colors
au!
    au ColorScheme * hi QuickFixLine ctermfg=NONE cterm=bold guifg=NONE gui=bold
augroup END

function! ToggleLocList()
    if empty(filter(getwininfo(), 'v:val.loclist'))
        lopen
    else
        lclose
    endif
endfunction

" "from: https://github.com/lilydjwg/dotvim/blob/master/plugin/escalt.vim
" function Escalt_console()
"   " <M-P> are left out because it causes issues
"   " https://github.com/vim/vim/issues/7135
"   " reason: https://github.com/vim/vim/issues/2581#issuecomment-639746235
"   for i in range(48, 57) + range(65, 79) + range(81, 90) + range(97, 122)
"     exe "set <M-".nr2char(i).">=\<Esc>".nr2char(i)
"   endfor
"   set <M-,>=,
"   set <M-.>=.
" endfunction
"
" if !has('nvim')
"   call Escalt_console()
" endif

nnoremap <silent> e :call ToggleLocList()<cr>







"============================================= plugins ========================

" 安装plug.vim插件管理器，依赖curl
" 这一段必须在 plug#begin()之前

if has('unix')
    if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
elseif has('win32')
    if empty(glob('$HOME/vimfiles/autoload/plug.vim'))
    silent !iwr -useb https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim | ni $HOME/vimfiles/autoload/plug.vim -Force
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
endif


" 在这一段需要的插件
" 插件
call plug#begin('~/.vim/plugged')
Plug 'liuchengxu/vim-which-key'


Plug 'junegunn/vim-easy-align'

" " chdir to working buffer
" Plug 'mattn/vim-findroot'

Plug 'beyondmarc/hlsl.vim',{'for':'hlsl'}

Plug 'pprovost/vim-ps1',{'for':'powershell'}

" profiler
Plug 'tweekmonster/startuptime.vim'
" 中文vim帮助
Plug 'yianwillis/vimcdoc'

" Track the engine.
Plug 'SirVer/ultisnips'

" vim surround
Plug 'tpope/vim-surround'

" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'


" vim-osc52
Plug 'ojroques/vim-oscyank',{'branch': 'main'}
" git power
Plug 'tpope/vim-fugitive'

" disable when in wsl
if $WSL_FLAG != 1
    Plug 'lilydjwg/fcitx.vim'
endif
" 缩进线
Plug 'Yggdroot/indentLine'
" base16主题
" 包含了很多主题
" 可以用:colorscheme base-16-<Tab>查看
" 也可以在http://chriskempson.com/projects/base16/上看
Plug 'chriskempson/base16-vim'
Plug 'vim-airline/vim-airline-themes'
" Airline
Plug 'vim-airline/vim-airline'
" 文件树
Plug 'scrooloose/nerdtree',{'on':  'NERDTreeToggle'}
" CMake 字典补全
" use my own fork
Plug 'BlurryLight/vim-cmake-complete',{'for':['cmake']}

" CMake syntax
Plug 'pboettch/vim-cmake-syntax'
" 模糊查找
" 需要GNU global配合
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
" ALE 静态检查
Plug 'dense-analysis/ale'

" Skywind的异步执行
Plug 'skywind3000/asyncrun.vim'
" GLSL support
Plug 'tikhomirov/vim-glsl',{'for':'glsl'}

" cpp语法高亮加强
Plug 'octol/vim-cpp-enhanced-highlight'

"  Another CMake support

" Plug 'BlurryLight/vim-cmake'
Plug 'cdelledonne/vim-cmake'


" 代码异步格式化
Plug 'sbdchd/neoformat'

" auto pair
Plug 'jiangmiao/auto-pairs'

" MOST HORRIBLE PLUGIN(NOT ACTURALLY A PLUGIN BUT A MONSTER)
" The latest youcompleteme need cpp17
if $VIM_YCM_11 == 1
    Plug 'BlurryLight/YouCompleteMe',{'branch': 'legacy-c++11','do':'./install.py --clangd-completer','on': ['YcmCompleter']}
else
    Plug 'Valloric/YouCompleteMe',{'do':'./install.py --clangd-completer','on': ['YcmCompleter']}
endif


"NERD commenter
" 快速注释
Plug 'scrooloose/nerdcommenter'

" Another one
" Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } ,'for': 'markdown'}


" c/c++ header / source 跳转
" need to be update. 
Plug  'BlurryLight/vim-fswitch'


"rainbow parens
Plug 'luochen1990/rainbow'
let g:rainbow_conf = {
\   'separately': {
\       'cmake': 0,
\   }
\}
let g:rainbow_active = 1

" echodoc
Plug 'Shougo/echodoc.vim'

" My Private affairs
" Plug 'wakatime/vim-wakatime'

" tagbar has a nice tui for overview a big file
Plug 'preservim/tagbar',{'on':  'TagbarToggle'}
"
Plug 'babaybus/DoxygenToolkit.vim',{'for':['cpp','c','python']}

call plug#end()



" ===============================插件配置=====================================
" 主题设置
" 使用256位颜色
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      set termguicolors
endif
set t_Co=256
let base16colorspace=256
" colorscheme base16-onedark
" colorscheme base16-oceanicnext
colorscheme base16-flat
" colorscheme base16-github
" colorscheme base16-monokai
colorscheme base16-material
" colorscheme base16-one-light
" colorscheme base16-tomorrow
" base16-tomorrow-night-eighties 还不错
" let g:airline_theme = 'solarized'
" let g:airline_solarized_bg='light'
"

"  这3个一组
<<<<<<< HEAD
"  似乎solarized-light有bug，不要用
=======
>>>>>>> private
" colorscheme base16-solarized-light
" let g:light_theme = 1

" whichkey
let g:which_key_map =  {}
nnoremap <silent> <leader> : <c-u>WhichKey '\'<CR>
vnoremap <silent> <leader> :<c-u>WhichKeyVisual '\'<CR>
"
" ultisnip
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" nerdtree 配置
" 下面两行：当打开一个文件夹时，自动打开nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" <leader>n打开nerdtree
nnoremap <leader>n :NERDTreeToggle<CR>
let NERDTreeQuitOnOpen=1

" 关闭vim当只剩下nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" leadF配置
" 自动更新索引
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "Source Code Pro"  }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 ,'Rg': 1}
let g:Lf_ShortcutF = "<leader>ff"
" buffer search
let g:Lf_ShortcutB = "<leader>fbb" 
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_GtagsSource = 1





function! SearchGlobalrc()
    if filereadable(g:root_dir . "/.globalrc") 
        return (g:root_dir . "/.globalrc")
    elseif filereadable(".globalrc")
        return (getcwd() . "/.globalrc")
    endif
    return $HOME."/.globalrc"
endfunction
let g:globalrc_path = SearchGlobalrc()

let g:Lf_Gtagsconf = g:globalrc_path
let g:Lf_Gtagslabel = 'native-pygments'
let g:Lf_WildIgnore = {
        \ 'dir': ['.svn','.git','.hg'],
        \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
        \}
let g:Lf_RgConfig = [
        \ "--max-columns=150",
        \ "--glob=!git/*",
        \ "--hidden"
    \ ]
" 避免ESC退出,使用q退出
" let g:Lf_CommandMap = {'<tab>':[ '<ESC>' ]}
" let g:Lf_NormalMap = {
"             \ "_":  [
"             \["<ESC>", '<Nop>'],
"             \["<tab>", '<Nop>'],
"             \]
"             \}
        
"<leader>f-<command>-<name>
let g:Lf_RootMarkers = ['.root','.project','.git', '.svn', '.hg']
" 搜索光标所在词语并允许跳转
let g:which_key_map.f = { 'name' : '+Leaderf' }
nnoremap <leader>fgg :<C-U><C-R>=printf("Leaderf gtags -g %s --auto-jump v", expand("<cword>"))<CR><CR>
let g:which_key_map.f.gg = 'gtags grep'

" 自动跳转光标所在位置词语的引用或定义
" by-context
nnoremap <leader>fgb :<C-U><C-R>=printf("Leaderf gtags --by-context --auto-jump v")<CR><CR>
let g:which_key_map.f.gb = 'gtags context' 

" 搜索光标所在词语的引用并允许跳转
nnoremap <leader>fgr :<C-U><C-R>=printf("Leaderf gtags -r %s --auto-jump v", expand("<cword>"))<CR><CR>
let g:which_key_map.f.gr = 'gtags ref' 

" 搜索光标所在词语的定义并允许跳转
nnoremap <leader>fgd :<C-U><C-R>=printf("Leaderf gtags -d %s --auto-jump v", expand("<cword>"))<CR><CR>
let g:which_key_map.f.gd = 'gtags def' 
"  显示本文件tag
nnoremap <leader>fbt :<C-U><C-R>=printf("LeaderfBufTag")<CR><CR>
let g:which_key_map.f.bt = 'gtags bufTag' 

"  显示本文件函数列表
nnoremap <leader>fbf :<C-U><C-R>=printf("LeaderfFunction")<CR><CR>
let g:which_key_map.f.bf =  'gtags bufFunc' 

"  显示所有symbols
nnoremap <leader>fgs :<C-U><C-R>=printf("Leaderf gtags %s","")<CR><CR>
let g:which_key_map.f.gs =  'gtags symbols' 
" Leaderf gtags --recall 重复上一次搜索
nnoremap <leader>fgc :<C-U><C-R>=printf("Leaderf gtags --recall")<CR><CR>
let g:which_key_map.f.gc = 'gtags recall' 
"  搜索某个pattern
nnoremap <leader>fre :<C-U><C-R>=printf("Leaderf rg -e %s", expand("<cword>"))<CR>
" Leaderf fc --recall 重复上一次搜索
nnoremap <leader>frc :<C-U><C-R>=printf("Leaderf rg --recall")<CR><CR>
let g:which_key_map.f.rc =  'rg recall' 
" 搜索某个pattern current-buffer
nnoremap <leader>frb :<C-U><C-R>=printf("Leaderf rg --current-buffer -e %s", expand("<cword>"))<CR>
let g:which_key_map.f.rb = 'rg cur_buf' 


" autocmd BufEnter * exe ':cd '.g:root_dir
"}}

" neoformat设置
" format on save
" o/pyc后缀是为了gitignore,常见的gitignore都忽略
if filereadable(g:root_dir . "/.vimneoformat") ||
            \ filereadable(g:root_dir . "/.clang-format") ||
            \ filereadable(g:root_dir . "/.vimneoformat.o") ||
            \ filereadable(g:root_dir . "/.vimneoformat.pyc")
    augroup fmt
    autocmd!
    autocmd BufWritePre * undojoin | Neoformat
    augroup END
endif


" GLSL support
let g:glsl_default_version = 'glsl330'
let g:glsl_file_extensions = '*.glsl,*.vsh,*.fsh,*.vert,*.tesc,*.tese,*.geom,*.frag,*.comp'


" Youcompleteme
" 让按键更正常
" 当有补全列表时，回车等于补全
" 当没有补全列表时，回车等于插入新行

augroup lazy_load_ycm
  autocmd!
  autocmd InsertEnter * call plug#load('YouCompleteMe')
                     \| autocmd! lazy_load_ycm
augroup END


inoremap <expr> <cr> ((pumvisible())?("\<C-y>"):("\<cr>"))
" 关闭每次都要load conf的提示
let g:ycm_confirm_extra_conf = 0
" 语义补全
let g:ycm_semantic_triggers =  {
            \ 'cmake,lua': ['re!\w{2}'],
            \}
" 静态检查
let g:which_key_map.g = { 'name' : '+YCM' }

let g:ycm_show_diagnostics_ui = 1
"let g:ycm_min_num_identifier_candidate_chars = 2
" 用ycm generator感觉会更好
let g:ycm_global_ycm_extra_conf = '$HOME/.vim/.ycm_extra_conf.py'
let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
" <leader>gd 跳转定义和声明
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
autocmd filetype c,cpp,python,csharp,lua nnoremap <buffer> <C-]> :YcmCompleter GoTo<CR>
" <leader>gc goto doC 开一个prev窗口显示文档
autocmd filetype c,cpp,python,csharp,lua nnoremap <buffer> <leader>gc  :YcmCompleter GetDoc<CR>
let g:which_key_map.g.c = "GetDoc"
autocmd filetype c,cpp,python,csharp,lua inoremap <buffer> <C-]> :YcmCompleter GoTo<CR>
autocmd filetype c,cpp,python,csharp,lua nnoremap <buffer> <leader>gd  :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:which_key_map.g.d = "GoToDefOrDeclare"
autocmd filetype c,cpp,python,csharp,lua nnoremap <buffer> <leader>gr :<C-U><C-R>=printf("YcmCompleter GoToReferences %s", expand("<cword>"))<CR>
let g:which_key_map.g.r = "GoToRef"
autocmd filetype c,cpp,python,csharp,lua nnoremap <buffer> <leader>gs :<C-U><C-R>=printf("YcmCompleter GoToSymbol %s", expand("<cword>"))<CR>
let g:which_key_map.g.s = "GoToSymbol"
let g:ycm_goto_buffer_command = 'split-or-existing-window'
set completeopt+=menuone
set completeopt+=noselect
let g:ycm_warning_symbol='⚠'
let g:ycm_always_populate_location_list = 1
let g:ycm_key_detailed_diagnostics = '<leader>yd'
let g:ycm_key_invoke_completion = '<leader>yc'
set tags=./.ctags;,.ctags " from current dir and upper dir search for .ctags file

let g:which_key_map.y = { 'name' : '+YCM' }
let g:which_key_map.y.d="key diag"
let g:which_key_map.y.c="invoke comp"

" this is the default setting from ycm
" the markdown and text is commented by me

         " 'markdown': 1,
         "'text': 1,
let g:ycm_filetype_blacklist = {
        \ 'tagbar': 1,
        \ 'notes': 1,
        \ 'netrw': 1,
        \ 'unite': 1,
        \ 'vimwiki': 1,
        \ 'pandoc': 1,
        \ 'infolog': 1,
        \ 'leaderf': 1,
        \ 'mail': 1
        \ }



 
" nerd commenter注释
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1
" 关闭所有默认映射
let g:NERDCreateDefaultMappings = 0

" 快速注释，为了和多数IDE保持一致，可以映射到<C-/>上
" 不，我错了，<C-/>在vim里不能用
" from https://github.com/scrooloose/nerdcommenter/issues/267#issuecomment-248839961
" 可以用<leader>cc来切换和打开注释
autocmd! VimEnter * call s:fcy_nerdcommenter_map()
function! s:fcy_nerdcommenter_map()
    nmap <leader>cc <plug>NERDCommenterToggle
    vmap <leader>cc <plug>NERDCommenterToggle gv
endfunction

" cpp语法高亮加强
let g:cpp_posix_standard = 1 "打开POSIX高亮"
let g:cpp_experimental_template_highlight = 1 "template "
let g:cpp_member_variable_highlight = 1
let g:cpp_class_scope_highlight = 1
let g:cpp_class_decl_highlight = 1

" vhdirk/vim-CMake配置
" met g:cmake_project_generator="Ninja" "默认ninja
" let g:cmake_export_compile_commands = 1
" let g:cmake_ycm_symlinks = 1 "自动生成ycm

" vim-Cmake配置
let g:cmake_link_compile_commands = 1
let g:cmake_jump_on_error = 0 " We do not want to focus the console
let g:cmake_build_dir_location= './build'
" let g:cmake_generate_options=['-GNinja']

augroup vim-cmake-group
    au!
autocmd User CMakeBuildFailed CMakeClose
autocmd User CMakeBuildFailed copen
autocmd User CMakeBuildFailed Cfilter error
augroup END

function! VimCMakeBuildSucceededCallback()
    CMakeClose
    " disbale async bell
    let g:asyncrun_bell = 0
    AsyncRun -silent -strip notify "CMake Build Succeeded"
    " restore the bell
    let g:asyncrun_bell = 1
endfunction

augroup vim-cmake-group
" at build succeeded, call bash function `notify` to send a notification.
" notify is a alias for program http://vaskovsky.net/notify-send/
" If the command doesn't exists it failed silently
autocmd! User CMakeBuildSucceeded :call VimCMakeBuildSucceededCallback()
augroup END

aug vim-cmake-group
    au WinEnter * if winnr('$') == 1 && &filetype == "vimcmake"|q!|endif
aug END

let g:which_key_map.z = { 'name' : '+CMake' }
nnoremap <leader>zg :<C-U><C-R>=printf("CMakeGenerate %s", "Debug")<CR>
let g:which_key_map.z.g = "Generate"
nnoremap <leader>zb :<C-U><C-R>=printf("CMakeBuild --parallel %s", "")<CR>
let g:which_key_map.z.b = "Build"
nnoremap <leader>zs :<C-U><C-R>=printf("CMakeSwitch %s", "")<CR>
let g:which_key_map.z.s = "Switch Profile"
nnoremap <leader>zc :CMakeClose<CR>
let g:which_key_map.z.c = "Close"


" C/C++源代码跳转
" gf去头文件
" <C+w>gf 在新窗口打开
" C+] 利用tag跳转, C+i C+o跳转buffer
" 还有接下来的定义
" vim-fswitch

let g:which_key_map.s = { 'name' : '+split' }

nnoremap <leader>sw :FSSplitAbove<CR>
nnoremap <leader>ss :FSSplitBelow<CR>
nnoremap <leader>sa :FSSplitLeft<CR>
nnoremap <leader>sd :FSSplitRight<CR>

" 参数提示
" YCM has done it
"To use echodoc, you must increase 'cmdheight' value.
set cmdheight=2
let g:echodoc_enable_at_startup = 1
" disable echodoc when cmake
" autocmd FileType cmake :set cmdheight=1
" autocmd FileType cmake let g:echodoc_enable_at_startup = 0

" \'c':[],
" \'cpp':[],
" ALE设置
let g:ale_linters = {
            \'python':['pylint'],
            \'cpp':['clangd'],
            \'c':['clangd'],
            \}
let g:ale_fixers = {
            \'cpp':['clangtidy','clang-format'],
            \'c':['clangtidy','clang-format'],
            \}
let g:ale_completion_enabled = 0
" disable warning,convention and refactoring
let g:ale_python_pylint_options= "--extension-pkg-whitelist=cv2,numpy,torch	--disable=C,R --init-hook='import sys; sys.path.append(\".\")'"
" Write this in your vimrc file
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 1
" You can disable this option too
" if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0
let g:ale_linter_aliases = {'bash': ['sh']}

" auto open quickfix at height of 8 lines
let g:asyncrun_open = 8
" async默认会响铃
let g:asyncrun_bell = 1
nnoremap <silent> q :call asyncrun#quickfix_toggle(8)<cr>


" indentLine breaks json files
let g:vim_json_conceal = 0
" indentLine breaks markdown files
au FileType markdown let g:indentLine_setConceal= 0
" indentLine breaks tex files
let g:tex_conceal = 0

"  vim-osc52
"  <leader>terminal-copy 使用魔法osc-52复制到剪切板
vnoremap <leader>ty :OSCYank<CR>
" Leader o Yank操作符，后可以接各种text object 
" Leader-o-_ yank this line
nmap <leader>o <Plug>OSCYank
let g:which_key_map.t = { 'name' : '+tab/ternimal' }
let g:which_key_map.t.s = 'OSC52-Copy'

" vim tagbar
" tagbar toggle
let g:which_key_map.t.t = 'TagbarToggle'
nnoremap <leader>tt :TagbarToggle<CR>
let g:tagbar_type_hlsl = {
    \ 'ctagstype' : 'c',
    \ 'kinds'     : [
        \ 's:structs', 'f:functions', 'm:members','d:macros','v:variables' ]
\ }
let g:tagbar_type_glsl = {
    \ 'ctagstype' : 'c',
    \ 'kinds'     : [
        \ 's:structs', 'f:functions', 'm:members','d:macros','v:variables' ]
\ }
let g:tagbar_type_cg= {
    \ 'ctagstype' : 'c',
    \ 'kinds'     : [
        \ 's:structs', 'f:functions', 'm:members','d:macros','v:variables' ]
\ }
" " 自动复制+ reg
" augroup OSCYank
"   autocmd!
"   autocmd TextYankPost *
"     \ if v:event.operator is 'y' && v:event.regname is '+' | call YankOSC52(getreg('+')) | endif
" augroup END

"Quickfix
" close vim when quickfix is the last window
aug QFClose
  au!
    au WinEnter * if winnr('$') == 1 && &buftype == "quickfix"|q|endif
aug END

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"===============================语言配置=====================================

" only support c file
" I rarely use vim to write C++ code
" I'd to admit vscode and Qtcreator do much better than vim when writting
" C++ code, especially when templates joining the party.

" command Make will call make and then cwindow which
" opens a 3 line error window if any errors are found.
" " If no errors, it closes any open cwindow.
" autocmd filetype c set makeprg=gcc\ -O2\ -lpthread\ -std=gnu99\ -g\ %\ -o\ %<
" autocmd filetype c nnoremap <buffer><leader>r :silent make\|redraw!\|cw<CR>
autocmd filetype cpp nnoremap <buffer><leader>agr :AsyncRun gcc "%" -o "%<" -lpthread -Wall -pedantic -Wextra -std=gnu99<CR>
autocmd filetype cpp nnoremap <buffer><leader>agr :AsyncRun g++ "%" -o "%<" -lpthread -Wall -pedantic -Wextra -std=cxx17<CR>
autocmd filetype cpp nnoremap <buffer><leader>acr :AsyncRun clang++ "%" -o "%<" -lpthread -Wall -pedantic -Wextra -std=cxx17<CR>
autocmd FileType c,cpp setlocal equalprg=clang-format

" The ctagshere is a utils function that defines in bashrc to generate ctags
" in current dir
nnoremap <leader>at :AsyncRun ctagshere <CR>
let g:which_key_map.a = { 'name' : '+AsyncRun' }
autocmd filetype cpp let g:which_key_map.a.gr = 'g++'
autocmd filetype c let g:which_key_map.a.gr = 'gcc'
autocmd filetype cpp let g:which_key_map.a.cr = 'clang++'
let g:which_key_map.a.t = 'ctags'


" 高亮所在行的行号
" 必须放在主题的后面，覆盖主题设置
" 强迫症杀手
highlight CursorLine cterm=NONE ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE
set cursorline

" for error highlight，防止错误整行标红导致看不清
" 从k-vim里面拿过来的
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline
augroup disable_paste
au!
    au InsertLeave * set nopaste
augroup END

" shaderlab, unreal shader set to hlsl
au BufNewFile,BufRead *.usf,*.shader,*.shaderlab,*.cginc,*.ush setfiletype hlsl

call which_key#register('\', "g:which_key_map")

nnoremap <silent> <leader>ts :call CycleColor()<CR>
let g:which_key_map.t.s = "SwitchTheme"

let g:which_key_map.W = { 'name' : 'vitmp_w' }
let g:which_key_map.P = { 'name' : 'vitmp_r' }

let g:which_key_map.w = { 'name' : '+win' }
let g:which_key_map.w.s = "WinSplitMode"


fun! CycleColor()
    let themes = ['base16-monokai','base16-flat', 'base16-onedark','base16-tomorrow','base16-tomorrow-night-eighties','base16-one-light','base16-material','base16-oceanicnext']

    " default is -1
    let i = get(b:, 't_index', -1) 
    let i = (i+1)%len(themes)
    let theme = themes[i]
    " store current index to b:t_index
    let b:t_index = i
    execute printf('colorscheme %s', theme)
    let b:cur_theme = theme
    " vim will postpone redraw until user input
    " when redraw, the echo message will be lost
    " so we must manually call redraw before echo
    " see :h echo
    redraw | echo b:cur_theme
endfun

let g:ycm_ale_on = 1

function Disable_ycm_ale()
    let g:ycm_show_diagnostics_ui = 0
    if exists("g:ale_enabled") && (g:ale_enabled == 1)
        :ALEDisable
    endif
    if exists(":YcmRestartServer")
        :YcmRestartServer
    endif
    let g:ycm_ale_on = 0
    :w
    :e!
    :echom "YCM ALE off"
endfunction
"Toggle YouCompleteMe and ALE
function Toggle_ycm_ale()
    if g:ycm_ale_on == 0
        let g:ycm_show_diagnostics_ui = 1
        if exists("g:ale_enabled") && (g:ale_enabled == 0)
            :ALEEnable
        endif
        if exists(":YcmRestartServer")
            :YcmRestartServer
        endif
        let g:ycm_ale_on = 1
        :w
        :e!
        :echom "YCM ALE on"
    elseif g:ycm_ale_on == 1
        :call Disable_ycm_ale()
    endif
endfunction
nnoremap <silent> <leader>ta :call Toggle_ycm_ale()<CR>
let g:which_key_map.t.a = "Toggle_YCM_ALE"

function! LoadLocalVimrc()
    if filereadable(g:root_dir . "/.lvimrc") 
        " echom "Loaded " .g:root_dir . "/.lvimrc"
        execute printf(':source %s/.lvimrc',g:root_dir)
    endif
    if filereadable("./.lvimrc")
        " echo "Loaded " . "./.lvimrc"
        execute printf(':source .lvimrc')
    endif
endfunction

" to update the lsp:
" wget https://github.com/Tencent/LuaHelper/raw/master/luahelper-vscode/server/linuxlualsp -O $HOME/.vim/bin/TencentLuaHelperlsp
let g:ycm_language_server = [
  \   { 'name': 'lua',
  \     'filetypes': [ 'lua' ],
  \     'cmdline': [ expand($HOME . '/.vim/bin/TencentLuaHelperlsp'),
  \                  '-mode','1']
  \   },
  \ ]

" doxygen 
let g:DoxygenToolkit_authorName="Blurry Light"

" always be the bottom of the file
" .lvimrc will be loaded before any plug loaded
execute printf(':call LoadLocalVimrc()') 
" 对于无法在Linux下编译的项目，需要在项目根目录新建.lvimrc并定义ycm_ale_on = 0
" 关闭代码的诊断提示,但是ycm保持开启，提供最基础的omni补全，并且允许ycm从ctags里搜集补全
if g:ycm_ale_on == 0 " if defined in .lvimrc
    let g:ale_enabled = 0
    let g:ycm_show_diagnostics_ui = 0 " we only disbale ycm diagnostics, allow ycm for basic compeletion
    let g:ycm_collect_identifiers_from_tags_files = 1 " allow ycm collect tags
    autocmd filetype c,cpp,python,csharp,lua unmap <buffer> <C-]>
    autocmd filetype c,cpp,python,csharp,lua iunmap <buffer> <C-]>
endif

" hlsl高亮设置
autocmd filetype hlsl call HLSLFoldPreprocessor()
function! HLSLFoldPreprocessor()
    set nofoldenable
    " set foldmarker=#if,#endif
    set foldmethod=syntax
    syn keyword         hlslType                UNROLL BRANCH
    syntax region CoreReview matchgroup=cComment start=/\/\/CR/ end=/\/\/RC/ contains=hlslType,hlslFunc,cCommentL,cComment
endfunction

<<<<<<< HEAD
" 根据选中，\lh高亮所有行，\lc清理所有行,\ld清理当前行
if exists("g:light_theme") && (g:light_theme == 1)
=======
if exists('g:light_theme') && g:light_theme == 1
>>>>>>> private
    highlight LineHighlight ctermbg=100 guibg=#D2B48C
    highlight CoreReview ctermbg=241 guibg=#35212C
    let g:Lf_PopupColorscheme = 'gruvbox_material'
else
    highlight LineHighlight ctermbg=100 guibg=#374090
    highlight CoreReview ctermbg=241 guibg=#35212C
endif
" 根据选中，\lh高亮所有行，\lc清理所有行,\ld清理当前行
nnoremap <silent> <leader>ll :call matchadd('LineHighlight', '\%'.line('.').'l')<CR>
vnoremap <leader>ll :<c-u>call HiglightVisualLines()<CR>
vnoremap <leader>ld :<c-u>call DeleteVisualLines()<CR>
let g:which_key_map.l = { 'name' : '+LineHighlight' }
let g:which_key_map.l.l = { 'name' : 'Highlight' }
nnoremap <leader>lc :<C-U>call clearmatches()<CR>
let g:which_key_map.l.c = { 'name' : 'ClearHL' }

" HiglightVisualLines()
" loop throough visually selected lines and give them highlighting
function! HiglightVisualLines()
    for i in range(line('v'),line("'>"))
        call matchadd('LineHighlight', '\%'.i.'l')
    endfor
endfunction

function! DeleteVisualLines()
    for j in range(line('v'),line("'>"))
        for m in filter(getmatches(), { i, v -> has_key(l:v, 'pattern') && l:v.pattern is? '\%'.j.'l'} )
            call matchdelete(m.id)
        endfor
    endfor
endfunction

nnoremap <silent> <leader>ld :
  \for m in filter(getmatches(), { i, v -> has_key(l:v, 'pattern') && l:v.pattern is? '\%'.line('.').'l'} )
  \<BAR>           :call matchdelete(m.id)
  \<BAR> :endfor<CR>

if $WSL_FLAG == 1
    function! OpenInRider()
        " expand(%.p) fullpath
        " :echo line(".") expand("%:p")
        "
        "// system返回的字符串只会有\n，不会有\r\n
        let g:rider_win_file_path = ' "'.system('wslpath -w ' . expand("%:p"))[:-2] . '"'
        let cmdstring = '!nohup Rider64.exe ' . "--line " . line(".") . g:rider_win_file_path . " >> ~/rider.log 2>&1 &"
        silent! execute cmdstring
        redraw!
    endfunction
    nnoremap <leader>rd :<c-u>call OpenInRider()<CR>
endif

